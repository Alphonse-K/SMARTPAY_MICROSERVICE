# docker-compose.yml
version: '3.8'

services:
  # Django Application
  web:
    build: .
    container_name: django_app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - PYTHONPATH=/app
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    depends_on:
      - db
    networks:
      - proxy
    labels:
      # - "traefik.enable=true"
      # - "traefik.http.routers.django.rule=Host(`${DOMAIN}`)"
      # - "traefik.http.routers.django.entrypoints=web"
      # - "traefik.http.services.django.loadbalancer.server.port=8000"
      # - "traefik.http.routers.django.middlewares=redirect-to-https@docker"
      # - "traefik.http.routers.django-secure.rule=Host(`${DOMAIN}`)"
      # - "traefik.http.routers.django-secure.entrypoints=proxysecure"
      # - "traefik.http.routers.django-secure.tls=true"
      # - "traefik.http.routers.django-secure.tls.certresolver=myresolver"
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.django.entrypoints=websecure"
      - "traefik.http.routers.django.tls=true"
      - "traefik.http.routers.django.service=django"
      - "traefik.http.services.django.loadbalancer.server.port=8000"

    expose:
      - "8000"
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - proxy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: traefik_smartpay
    restart: unless-stopped
    ports:
      - "80:80"           # HTTP
      - "443:443"         # HTTPS  
      - "8080:8080"       # Dashboard - ADD THIS LINE
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml"
      - "./traefik/config:/etc/traefik/config"
      - "./traefik/certs:/etc/traefik/certs"
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH_USERS}"

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  proxy:
    driver: bridge
